<?php

// TODO: must handle sort if it is passed -- need to update the solr_url that gets saved to solr_search_sessions 
//       as well as properly parse that for creating the solrQuery
/**
 * @file
 * Primary hook implementations.
 */

// Permissions.
define('UPITT_ISLANDORA_SOLR_SEARCH_EXTRAS_MANAGE', 'manage upitt solr search');

// constant
define('CST_ISLANDORA_PATH', drupal_get_path('module', 'islandora'));
define('CST_SESSION_LIFETIME', 60 * 30);  // 30 minutes

/**
 * Implements hook_menu().
 */
function upitt_islandora_solr_search_extras_menu() {
  $items = array(
    'admin/islandora/tools/upitt_islandora_solr_search_extras' => array(
      'title' => 'SOLR Search Extras Settings',
      'description' => 'Configure the various SOLR Search Extras options.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('upitt_islandora_solr_search_extras_admin_settings'),
      'access arguments' => array(UPITT_ISLANDORA_SOLR_SEARCH_EXTRAS_MANAGE),
      'file' => 'includes/admin.form.inc',
    ),
    // solr search sessions handling
    'islandora/object/%islandora_object/from_search/%' => array(
      'title callback' => 'upitt_islandora_solr_search_extras__islandora_drupal_title',
      'title arguments' => array(2),
      'page callback' => 'upitt_islandora_solr_search_extras__islandora_view_object',
      'page arguments' => array(2, 4),
      'type' => MENU_NORMAL_ITEM,
      'access callback' => 'upitt_islandora_solr_search_extras__islandora_object_access_callback',
      'access arguments' => array(ISLANDORA_VIEW_OBJECTS, 2),
    ),
    // handler for search in collection using the islandora_solr code
    'islandora/search_collection/%islandora_object' => array(
      'title arguments' => array(2),
      'title callback' => 'upitt_islandora_solr_search_extras_lookup_title',
      'description' => 'Search the models within this Collection.',
      'page callback' => 'upitt_islandora_solr_search_extras_search_specific',
      'page arguments' => array(2),
      'type' => MENU_NORMAL_ITEM,
      'access callback' => 'islandora_object_access_callback',
      'access arguments' => array(ISLANDORA_VIEW_OBJECTS, 2),
    ),
    'islandora/search_collection/%islandora_object/%' => array(
      'title arguments' => array(2),
      'title callback' => 'upitt_islandora_solr_search_extras_lookup_title',
      'description' => 'Search the models within this Collection.',
      'page callback' => 'upitt_islandora_solr_search_extras_search_specific',
      'page arguments' => array(2),
      'type' => MENU_NORMAL_ITEM,
      'access callback' => 'islandora_object_access_callback',
      'access arguments' => array(ISLANDORA_VIEW_OBJECTS, 2),
    ),
  );
  return $items;
}

function upitt_islandora_solr_search_extras_search_specific(AbstractObject $islandora_object) {
  $solr_query = format_string('!field:!value', array(
              '!field' => 'RELS_EXT_isMemberOfCollection_uri_ms',
              '!value' => Apache_Solr_Service::escape('info:fedora/' . $islandora_object),
      ));
  return islandora_solr($solr_query);  
}

// This will redirect old /islandora/object/{PID} urls for collections to valid collection alias urls if they exist.
// This also must prevent a redirect-loop from happening by inspecting the actual URL for this object.
function upitt_islandora_solr_search_extras_islandora_view_object($islandora_object) {
  $url = $_SERVER['REQUEST_URI'];
  // Is a valid path for redirection, and is a collection...
  if (strstr($url, '/islandora/object/') && _is_collection($islandora_object)) {
    // Look up the alias record that matches the PID
    $raw_source = urldecode(str_replace('/islandora/object/', 'islandora/search_collection/', $url));
    @list($source, $junk) = explode('/from_search/', $raw_source);
    @list($source, $params) = explode('/search_collection/?', $source);
    $params_arr = explode('&', $params);
    $query_params = array();
    foreach ($params_arr as $k => $paramPair) {
      if (trim($paramPair) <> '') {
        $equal_pos = strpos($paramPair, '=');
        $param = substr($paramPair, 0, $equal_pos);
        $value = substr($paramPair, $equal_pos + 1);
        $query_params[$param] = $value;
      }
    }
    if ($junk) {
      $query_params['skey'] = $junk;
    }

    $result = db_query('SELECT `alias` FROM {url_alias} WHERE `source` = :source', array(':source' => $source));
    if ($record = $result->fetchAssoc()) {
      if ($record['alias']) {
        drupal_goto($record['alias'], ((count($query_params)) ? array('query'=>$query_params) : array()));
        exit;
      }
    }
  }
}

// Title callback function for 'islandora/search_collection/%islandora_object/%' menu routes.
function upitt_islandora_solr_search_extras_lookup_title($islandora_object) {
  if (_is_collection($islandora_object)) {
    return $islandora_object->label;
  }
}

/**
 * Implements hook_init().
 */
function upitt_islandora_init() {
  $path = drupal_get_path('module', 'upitt_islandora_solr_search_extras');
  drupal_add_css("$path/css/solr_search_extras.css");
}

/**
 * Implements hook_theme().
 */
function upitt_islandora_solr_search_extras_theme() {
  return array(
    // to remove duplicate pager and display_links
    'islandora_objects_subset' => array(
      'file' => 'theme/theme.inc',
      'template' => 'theme/islandora-objects-subset',
      'variables' => array(
        'objects' => NULL,
        'display' => 'grid',
        'limit' => 10,
        'total' => NULL,
        'pager_element' => 0,
      ),
    ),
    // to display collection search box
    'islandora_basic_collection' => array(
      'template' => 'theme/islandora-basic-collection',
      'file' => 'theme/theme.inc',
      'variables' => array('islandora_object' => NULL),
    ),
/*    'islandora_basic_collection_grid' => array(
      'template' => 'theme/islandora-basic-collection-grid',
      'file' => 'theme/theme.inc',
      'variables' => array('islandora_object' => NULL),
    ),*/
    // to replace output of grid with solr_search
    'islandora_objects_grid' => array(
      'template' => 'theme/islandora-objects-grid',
      'file' => 'theme/theme.inc',
      'variables' => array('islandora_object' => NULL, 'objects' => NULL),
    ),
    // to replace output with solr_search
    'islandora_objects_list' => array(
      'template' => 'theme/islandora-objects-list',
      'file' => 'theme/theme.inc',
      'variables' => array('islandora_object' => NULL, 'objects' => NULL),
    ),
    'islandora_objects' => array(
      'file' => 'theme/theme.inc',
      'template' => 'theme/islandora-objects',
      'variables' => array(
        'objects' => NULL,
        'display' => NULL,
        'page_size' => 20,
        'limit' => 12,
      ),
    ),
    // to display the solr search results for islandora/search and collection/[fedora-label]
    'islandora_solr_extras' => array(
      'template' => 'theme/islandora-solr-extras',
      'variables' => array(
        'results' => NULL,
        'elements' => array(),
        'pids' => array(),
      ),
    ),
    'islandora_solr_wrapper' => array(
      'file' => 'theme/theme.inc',
      'template' => 'theme/islandora-solr-wrapper',
      'variables' => array(
        'results' => NULL,
        'secondary_profiles' => NULL,
        'elements' => array(),
      ),
    ),
    // solr search sessions handling
    'islandora_default' => array(
      'file' => 'theme/theme.inc',
      'template' => 'theme/islandora-object',
      'variables' => array('islandora_object' => NULL),
    ),
  );
}

/**
 * This responds to the module_invoke_all().
 *
 * The call from within the islandora_solr module's
 * "islandora_solr_printResults" function will be handled here.
 * The functionality here is to display as normal for all objects that
 * already have MODS info, but to load the MODS from parent objects for
 * objects that have a value in RELS_EXT_isMemberOfCollection_uri_ms.
 *
 * @param array $solr_results
 *   Array containing the Solr results which are altered trough the query
 *   processor.
 *
 * @return markup
 *   Returns the themed solr search results.
 */
function upitt_islandora_solr_search_extras_islandora_solr_printResults($solr_results) {
  // The skey value will need to be written into the links for pages as handled by
  // /islandora/object/%islandora_object/from_search/% menu route above.
  module_load_include('inc', 'islandora_solr_search', 'includes/utilities');
  $skey = _get_skey($solr_results);

//  // Load collections from memcache
//  $collections = cache_get('ioc__collectionCModel', 'cache');
//  error_log('collections = ' . print_r($collections, true));

  $solr_fields = _get_solr_settings_fields();
  $solr_results = islandora_solr_prepare_solr_results($solr_results); 

  $object_results = $solr_results['response']['objects'];
  $object_results = islandora_solr_prepare_solr_doc($object_results); 

  // Get the field labels from the current instance of solr_results
  $field_labels = array();
  foreach ($solr_fields as $key => $value) {
    $field_labels[$key] = (is_array($value) ? $value['label'] : $value);
  }

  $elements = array();
  $elements['solr_total'] = $solr_results['response']['numFound'];
  $elements['solr_start'] = $solr_results['response']['start'];


  // This loop will do the post-processing to perform the following tasks:
  // 
  //   * Add the page_number element if needed
  //   * Link any of the page object fields that were added by lookup
  foreach ($object_results as $k=>$solr_result_object) {
    // process this later
    if (isset($object_results[$k]['solr_doc']['dc.title']) && isset($object_results[$k]['solr_doc']['dc.title']['value'])) {
      $object_results[$k]['solr_doc']['dc.title']['value'] = _inject_skey_to_markup($object_results[$k]['solr_doc']['dc.title']['value'], $object_results[$k]['PID'], $skey . '-' . ($elements['solr_start'] + $k), $object_results[$k]['object_url_fragment']);
    }
    $parent_pid = NULL;

    $object_results[$k]['object_url'] = _inject_skey($object_results[$k]['object_url'], $object_results[$k]['PID'], $skey . '-' . ($elements['solr_start'] + $k));
    if ((isset($object_results[$k]['datastreams']))) {
      $object_results[$k]['page_solr_doc'] = array();
      $object_results[$k]['thumbnail'] = $object_results[$k]['page_thumbnail'] = '';

      $path = url($object_results[$k]['thumbnail_url'], array('query' => $object_results[$k]['thumbnail_url_params']));
      if ($path <> '/') {
        $image = theme('image', array('path' => $path));

        $options = array('html' => TRUE);
        if (isset($object_results[$k]['object_label'])) {
          $options['attributes']['title'] = $object_results[$k]['object_label'];
        }
        if (isset($object_results[$k]['object_url_params'])) {
          $options['query'] = $object_results[$k]['object_url_params'];
        }
        if (isset($object_results[$k]['object_url_fragment'])) {
          // UNTIL the updated correct HOCR datatreams are in the system, disable the fragment here
          // $options['fragment'] = '';
          $options['fragment'] = $object_results[$k]['object_url_fragment'];
        }

        $object_results[$k]['thumbnail'] = l($image, $object_results[$k]['object_url'], $options);
      }
      else {
        $object_results[$k]['thumbnail'] = $object_results[$k]['page_thumbnail'];
        $object_results[$k]['page_thumbnail'] = '';
      }
      if (variable_get('upitt_islandora_solr_search_extras_showparent_searchresults') && (array_search('MODS', $object_results[$k]['datastreams']) === FALSE) && _can_lookup_MODS($object_results[$k]['PID'])) {
        // this logic might not matter since _can_lookup_MODS limits this to only page objects
        /* if (((!(isset($object_results[$k]['solr_doc']['RELS_EXT_isMemberOfCollection_uri_ms']))) ||
             (!(isset($object_results[$k]['solr_doc']['RELS_EXT_isPageOf_uri_ms']))) ||
             (!(isset($object_results[$k]['solr_doc']['RELS_EXT_isMemberOf_uri_ms'])))) &&
            (isset($object_results[$k]['object_url']))) { */
        if  (isset($object_results[$k]['object_url'])) {
          $parent_solr_doc = _islandora_solr_pid_parent_search($object_results[$k], $solr_fields, $options, $skey, '');
          // check to see that there is actually anything in the search result doc
          if (array_key_exists('PID', $parent_solr_doc) || TRUE) {
            // Keep the existing title value for later.
            $parent_pid = $parent_solr_doc['PID'];
            $object_results[$k]['page_solr_doc'] = $object_results[$k]['solr_doc'];
            // Link any of the page object fields that were added by lookup
            $page_solr_results['response']['objects'][0]['solr_doc'] = $parent_solr_doc;
            unset($parent_solr_doc['PID']);
            $object_results[$k]['solr_doc'] = $parent_solr_doc;

            if (isset($object_results[$k]['solr_doc']['dc.title']['value'])) {
              $object_results[$k]['solr_doc']['dc.title']['value'] = l($parent_solr_doc['solr_doc']['dc.title']['value'], _inject_skey($parent_solr_doc['object_url'], $parent_solr_doc['PID'], $skey . '-' . ($elements['solr_start'] + $k)), $options);
            }

/*            if ($tmp_title) {
              $object_results[$k]['tmp_solr_doc']['dc.title']['value'] = $tmp_title .
                ' in ' . l($parent_solr_doc['solr_doc']['dc.title']['value'], _inject_skey($parent_solr_doc['object_url'], $parent_solr_doc['PID'], $skey . '-' . ($elements['solr_start'] + $k)));
            } */
          }
        }
      }
    }
    // 1. Add the page number if applicable
    if ((stristr($object_results[$k]['content_models'][0], 'pageCModel') == 'pageCModel') &&
      (substr($object_results[$k]['object_label'], 0, 5) == 'Page ')) {
      // Get the page # value from the object_label - and create a new item that will be
      // rendered as the page number.
      @list($keep, $junk) = explode(", ", $object_results[$k]['object_label']);
      $page_number = str_replace("Page ", "", $keep);
      if (is_numeric($page_number)) {
        $object_results[$k]['solr_doc']['page_number'] = array('value' => 'Page: ' . $page_number, 'label' => 'Page #', 'class' => '' );
      }
    }

    // This part needs to call a dynamic "prepare function that will use the configurations that are in the solr settings | default display fields
    // to get their specific link_to_search, link_to_object, link_text_text, etc.
    // Look up any default display fields that are mapped to link_to_object 
    if (array_key_exists('RELS_EXT_isMemberOfCollection_uri_ms', $object_results[$k]['solr_doc']) && array_key_exists('value', $object_results[$k]['solr_doc']['RELS_EXT_isMemberOfCollection_uri_ms']) &&
      (strip_tags($object_results[$k]['solr_doc']['RELS_EXT_isMemberOfCollection_uri_ms']['value']) == $object_results[$k]['solr_doc']['RELS_EXT_isMemberOfCollection_uri_ms']['value'])) {
      $links = array();
      $col_pids = explode(",", $object_results[$k]['solr_doc']['RELS_EXT_isMemberOfCollection_uri_ms']['value']);
      foreach ($col_pids as $col_pid) {
        $link = _collection_pid($col_pid, $skey);
        $link_text = _get_solr_field_value_special(NULL, 'dc.title', TRUE, str_replace('info:fedora/', '', $col_pid));
        $link_options = array('attributes' => array('title' => $link_text));
        $links[] = l($link_text, $link, $link_options);
      }
      $collection_links[$k] = implode(', ', $links);
      $object_results[$k]['solr_doc']['RELS_EXT_isMemberOfCollection_uri_ms']['value'] = $collection_links[$k];
    }

    $solr_results['response']['objects'][$k] = $object_results[$k];
  }

  $object_results = $solr_results['response']['objects'];

  // Return themed search results.
  return theme('islandora_solr_extras', array('results' => $object_results, 'elements' => $elements));
}

function _get_skey($solr_results) {
  $lastmod_limit = time() - CST_SESSION_LIFETIME;
  $filter_index = 0;
  db_query('DELETE FROM {solr_search_skey_results} WHERE skey IN (SELECT skey FROM {solr_search_sessions} WHERE lastmod < :lastmod_limit)', array(':lastmod_limit' => $lastmod_limit));
  db_query('DELETE FROM {solr_search_sessions WHERE lastmod < :lastmod_limit', array(':lastmod_limit' => $lastmod_limit));
  if (!isset($solr_results['responseHeader']['params'])) {
    return '';
  }
  $skey = NULL;
  $results_per_page = variable_get('islandora_solr_num_of_results', 20);
  // The skey could come from refer_url if user clicked Return to Search Results.
  if (isset($_SERVER['HTTP_REFERER']) && (strstr($_SERVER['HTTP_REFERER'], '/from_search/') <> '')) {
    $parts = explode("/", $_SERVER['HTTP_REFERER']);
    // parts 0=http, 1= 2=[domain] 3=islandora 4=objec 5={PID} 6=from_search 7={skey}
    if ($parts[6] == 'from_search') {
      @list($skey, $offset) = explode('-', $parts[7]);
      _save_solr_search_session($skey, NULL, $solr_url, $offset, $results_per_page);
    }
  }
  if (!$skey) {
    $request_uri = urldecode(str_replace('/islandora/search/', '', $_SERVER['REQUEST_URI']));
    $is_dismax = (strstr($request_uri, '=dismax') <> '');
    @list($search, $junk) = explode('?', $request_uri);
    $solr_filters = $used_filters = array();
    $indexer = 0;
    if (isset($solr_results['responseHeader']['params']['fq']) && is_array($solr_results['responseHeader']['params']['fq'])) {
      foreach ($solr_results['responseHeader']['params']['fq'] as $k=>$filter) {
        if (array_search($filter, $used_filters) === FALSE) {
          $solr_filters[] = 'f[' . $indexer . ']=' . $filter;
          $used_filters[] = $filter;
          $indexer++;
        }
      }
    }
    if (isset($_GET['q']) && strstr($_GET['q'], '/search_collection/')) {
      $pid = _collection_pid($_GET['q'], $skey);
      $collection_object = islandora_object_load($pid);
      $q = 'RELS_EXT_isMemberOfCollection_uri_ms:*' . islandora_solr_lesser_escape($pid);
      $solr_filters[] = 'f[' . $indexer . ']=' . $q;
    }
    elseif ($search && $search <> '/islandora/search') {
      $collection_object = NULL;
      if (strstr($search, ':')) {
        $solr_filters[] = 'f[' . $indexer . ']=' . $search;
      } else {
//###        $solr_filters[] = 'qf=' . $search;
      }
    }
    if ($is_dismax && $search) {
      $solr_filters[] = 'q=catch_all_fields_mt:' . $search;
    }
    // Generate the effective search URL conditionally based on whether or not the search is on a collection object, or if search is dismax.
    $solr_url = (($collection_object) ? _format_collection_url($collection_object->label, TRUE) . '/' : '/islandora/search/') . '?islandora_solr_search_navigation=0&' . implode('&', $solr_filters);
    $skey = db_query('SELECT s.skey FROM {solr_search_sessions} s JOIN {solr_search_skey_results} r ON (r.skey = s.skey) WHERE s.solr_search_url = :u', array(':u' => $solr_url))->fetchField();
    if (!$skey) {
      $skey = md5(date('c'));
      _save_solr_search_session($skey, $solr_results, '', 0, $results_per_page);
    } else {
      $offset = (isset($_GET['page'])) ? $_GET['page'] * $results_per_page : 0;
      _save_solr_search_session($skey, NULL, $solr_url, $offset, $results_per_page);
    }
  }
  $lastmod = time();
  db_query('UPDATE {solr_search_sessions} SET `lastmod` = :lastmod WHERE skey = :skey', array('skey' => $skey, 'lastmod' => $lastmod));
  return $skey;
}

function _format_collection_url($fedora_label, $alias = FALSE) {
  $one_off_replacements = array(
      'bureau of police department of public safety pittsburgh pa records' => 'bureau-police-records-department-public-safety-pittsburgh-pa',
      'bureau of building inspection department of public safety pittsburgh pa records' => 'bureau-building-inspection-department-public-safety-pittsburgh-pa',
      'slavery manumission documents' => 'free-at-last-slavery-pittsburgh-18th-19th-centuries',
      'hj heinz company photographs' => 'h-j-heinz-company-photographs'
    );
  $strip_chars = array('.', ',', '/', '\'', '"', ')', '(', ':', '#', '&');
  $strip_words = array(' and ',
                       ' the ',
                       ' to ',
                       ' of ',
                       ' by ',
                       ' for ',
                       ' between ',
                       ' in ',
                       ' an ',
                       ' a ',
                       ' from ',
    );
  $strip_endings = array('');
  foreach ($strip_endings as $rtrim) {
    $fedora_label = rtrim($fedora_label, $rtrim);
  }
  if (isset($one_off_replacements[$fedora_label])) {
    $fedora_label = $one_off_replacements[$fedora_label];
  }
  return ($fedora_label) ? (($alias) ? 'collection/' : '/search_collection/') . str_replace($strip_chars, '', urldecode(str_replace("+", "-", urlencode(str_replace($strip_words, " ", strtolower(trim($fedora_label))))))) : '';
}

function _inject_skey_to_markup($markup, $PID, $skey, $fragment) {
  // Since these solr results are also rendered on a collection page, only inject if result is for the search page!
  if (!$skey) {
    return $markup;
  }
  preg_match('/^<a.*?href=(["\'])(.*?)\1.*$/', $markup, $m);
  return str_replace(array('/islandora/object/' . urlencode($PID) . '/from_search/', $m[2]),
                     array('', '/islandora/object/' . urlencode($PID) . '/from_search/' . $skey . ((isset($fragment) && ($fragment <> '')) ? '#' . $fragment : '')), $markup);
}

function _inject_skey($url, $PID, $skey) {
  // Since these solr results are also rendered on a collection page, only inject if result is for the search page!
  if (!$skey) {
    return $url;
  }
  if (!$url) {
    return '/islandora/object/' . urlencode($PID) . '/from_search/' . $skey;
  }
  @list($pre, $post) = explode("#", $url);
  return $pre . '/from_search/' . $skey . $post;
}

/**
 * Helper function to run the equivalent SOLR search to bring back ALL result PID values and store
 * this value set along with the original search URL for to "Return to search results".
 *
 * NOTE:  For speed, etc., this result set is limited to 1000 results.
 *
 * NOTE:  If any of the sub-objects fails to allow a SOLR query to run or the result record
 *   cannot be created for any other reason, the value of $skey is set to an empty string which
 *   will cause the /from_search/{skey} URL modifications to not happen.
 */
function _save_solr_search_session(&$skey, $solr_results, $solr_url = '', $offset, $howmany) {
  $append = ($solr_url <> '');
  if (!isset($solr_results['responseHeader']['params']) && ($solr_url == '')) {
    $skey = '';
    return;
  }
  $qf = '';
  // See if this is a collection page
  $collection_pid = (isset($_GET['q']) && strstr('islandora/search_collection/', $_GET['q'])) ? str_replace('islandora/search_collection/', '', $_GET['q']): NULL;
  if ($solr_url) {
    $is_dismax = (strstr($solr_url, '=dismax') <> '');
    if ($is_dismax) {
      @list($search, $junk) = explode("?", $solr_url);
      $search = str_replace('/islandora/search/', '', $search);
    }
    if (substr($solr_url, 0, 11) == 'collection/') {
      $q = 'RELS_EXT_isMemberOfCollection_uri_ms:*' . str_replace(':', '\\:', (isset($_GET['q']) && strstr($_GET['q'], 'islandora/search_collection/')) ? 
        str_replace('islandora/search_collection/', '', $_GET['q']) : 
        _collection_pid($_GET['q'], $skey));
    }
    else {
      // Hack - replace the encoded ampersand "&amp;" as "?amp;" until it is split
      $tmp = str_replace("/islandora/search/?islandora_solr_search_navigation=0&", "", str_replace("&amp;", "?amp;", $solr_url));
      $filters = explode("&", $tmp);
      foreach ($filters as $filter) {
        @list($keyname, $param) = explode("=", $filter);
        if ($keyname <> 'qf') {
          $param = str_replace("?amp;", "&amp;", $param);
          if ($param == 'dismax' && $search) {
            $q_arr[] = 'catch_all_fields_mt:' . $search;
          }
          else {
            $q_arr[] = $param;
          }
        }
        else { //### $qf = $param;
        }
      }
      $q = ((count($q_arr) > 0) ? '(' : '') . implode(') AND (', $q_arr) . ((count($q_arr) > 0) ? ')' : '');
    }
  }
  else {
    $request_uri = urldecode(str_replace('/islandora/search/', '', $_SERVER['REQUEST_URI']));
    $is_dismax = (strstr($request_uri, '=dismax') <> '');
    @list($search, $junk) = explode('?', $request_uri);

    $used_filters = $q_arr = $solr_filters = array();
    $filter_index = 0;
    if (is_array($solr_results['responseHeader']['params']['fq']) && count($solr_results['responseHeader']['params']['fq']) > 0) {
      foreach ($solr_results['responseHeader']['params']['fq'] as $k=>$filter) {
        if (array_search($filter, $used_filters) === FALSE) {
          $solr_filters[] = 'f[' . $filter_index . ']=' . $filter;
          $q_arr[] = $filter;
          $filter_index++;
          $used_filters[] = $filter;
        }
      }
    }
    if ($search && $search <> '/islandora/search') {
      // This value could contain a collection search /collection/{PID}, so restructure of $search is needed.
      if (isset($_GET['q']) && strstr($_GET['q'], '/search_collection/')) {
        $pid = _collection_pid($_GET['q'], $skey);
        $collection_object = islandora_object_load($pid);
        if (is_object($collection_object)) {
          $q = 'RELS_EXT_isMemberOfCollection_uri_ms:*' . islandora_solr_lesser_escape($pid);
          $solr_filters[] = 'f[' . $filter_index . ']=' . $q;
          $q_arr[] = $q;
        }
      } else {
        $collection_object = NULL;
        if (strstr($search, ':')) {
          $solr_filters[] = 'f[' . $filter_index . ']=' . $search;
          $q_arr[] = $search;
        }
        else {
          //###          $solr_filters[] = 'qf=' . variable_get('islandora_solr_query_fields', 'dc.title^5 dc.subject^2 dc.description^2 dc.creator^2 dc.contributor^1 dc.type'); // $search;
          //          $q_arr[] = $search . '?type=dismax';
        }
      }
    }
    if ($search && $is_dismax) {
      $q = 'catch_all_fields_mt:' . $search;
    }
    else {
      $q = ((count($q_arr) > 0) ? '(' : '') . implode(') AND (', $q_arr) . ((count($q_arr) > 0) ? ')' : '');
    }
    // Generate the effective search URL conditionally based on whether or not the search is on a collection object, or if search is dismax.
    $solr_url = (($collection_object) ? _format_collection_url($collection_object->label, TRUE) . '/' : '/islandora/search/') . '?islandora_solr_search_navigation=0&' . implode('&', $solr_filters);
  }
  $solr_base_filter = trim(variable_get('islandora_solr_base_filter'));
  $fl = 'PID,fgs_label_s';
  module_load_include('inc', 'islandora_solr_search', 'includes/utilities');
  $query_processor = new IslandoraSolrQueryProcessor();
  $query_processor->solrQuery = $q;
  // Calculate the offset by the current page of search results by looking for
  // a page _GET parameter
  $results_per_page = variable_get('islandora_solr_num_of_results', 20);
  $page = (isset($_GET['page'])) ? $_GET['page'] : round((1 + $offset) / $results_per_page);
  $query_processor->solrStart = $offset; //$page * $results_per_page;
  $query_processor->solrLimit = $howmany; //results_per_page;
  $query_processor->solrParams = array(
    'fl' => $fl,
    'fq' => '', // ($is_dismax) ? $q_arr : '',
    'qf' => '', // ($is_dismax) ? variable_get('islandora_solr_query_fields', 'dc.title^5 dc.subject^2 dc.description^2 dc.creator^2 dc.contributor^1 dc.type') : '',
  );

/*  if ($is_dismax) {
    _add_dismax_params($query_processor);
  }
*/
  $url = parse_url(variable_get('islandora_solr_url', 'localhost:8080/solr'));
  $solr = new Apache_Solr_Service($url['host'], $url['port'], $url['path'] . '/');
  $solr->setCreateDocuments(FALSE);
  try {
    $search_results = $solr->search($query_processor->solrQuery, $query_processor->solrStart, $query_processor->solrLimit, $query_processor->solrParams, 'GET'); 
    $tmp = json_decode($search_results->getRawResponse(), TRUE);
    $results = array();
    $numFound = $tmp['response']['numFound'];
    $solr_fields = array(
        'PID' => array('label' => 'PID', 'class' => 'PID'), 
        'fgs_label_s' => array('label' => 'fgs_label_s', 'class' => 'fgs_label_s')
      );
    if ($tmp['response']['numFound'] > 0) {
      foreach ($tmp['response']['docs'] as $k=>$rec) {
        if (variable_get('upitt_islandora_solr_search_extras_showparent_searchresults')) {
          $islandora_object = islandora_object_load($rec['PID']);
          // inspect this object to see if it has no MODS info
          if ($islandora_object && !isset($islandora_object['MODS']) && _can_lookup_MODS($rec['PID'])) {
            $tmp_solr_doc = _islandora_solr_pid_parent_search(NULL, $solr_fields, array(), $skey, $rec['PID']);
            $rec['PID'] = isset($tmp_solr_doc['PID']['value']) ? $tmp_solr_doc['PID']['value'] : $rec['PID'];
            $rec['fgs_label_s'] = isset($tmp_solr_doc['fgs_label_s']['value']) ? $tmp_solr_doc['fgs_label_s']['value'] : $rec['fgs_label_s'];
          }
        }
        $results[] = $rec['PID'] . '|' . str_replace("/", "", $rec['fgs_label_s']);
      }

      $lastmod = time();
      if (!$append) {
        db_insert('solr_search_sessions')->fields(array(
          'skey' => $skey,
          'solr_search_url' => $solr_url,
          'numResults' => $numFound,
          'lastmod' => $lastmod,
          ))->execute();
      }

      $this_offset = $offset;
      foreach ($results as $result) {
        @list($result_pid, $result_title) = explode("|", $result);
        db_query('DELETE FROM {solr_search_skey_results} WHERE skey = :skey AND offset = :offset', 
          array(':skey' => $skey, ':offset' => $this_offset));
        db_insert('solr_search_skey_results')->fields(array(
          'skey' => $skey,
          'PID' => $result_pid,
          'offset' => $this_offset,
          'title' => strlen($result_title) > 97 ? substr($result_title, 0, 97) . '...' : $result_title,
        ))->execute();
        $this_offset++;
      }
    }
    else {
      $skey = '';
    }
  }
  catch (Exception $e) {
    error_log('EXCEPTION in _save_solr_search_session : called from ' . $_SERVER['SERVER_NAME'] .
' - ' . $_SERVER['REQUEST_URI'] . '
' . print_r($e, true));
    $skey = '';
  }
  return;
}

/** 
 * Function to add needed params to a solr query processor when it is a dismax query.
 */
function _add_dismax_params(&$query_processor) {
  $query_processor->solrDefType = 'dismax';
  $query_processor->solrParams['defType'] = 'dismax';
}


/**
 * Helper function to lookup any solr field value for an islandora_object.
 */ 
function _get_solr_field_value_special($islandora_object, $field, $single_result = TRUE, $pid = '') {
  $value = NULL;
  $query_processor = new IslandoraSolrQueryProcessor();
  $query_processor->solrQuery = 'PID:' . str_replace(":", "\:", (is_null($islandora_object) && $pid) ? $pid : $islandora_object->id);
  $query_processor->solrStart = 0;
  $query_processor->solrLimit = 1;
  $query_processor->solrParams = array(
    'fl' => $field,
    'fq' => '',
  );
  $query_processor->executeQuery(FALSE);
  if ($query_processor->islandoraSolrResult['response']['numFound'] > 0) {
    $solr_results_doc = $query_processor->islandoraSolrResult['response']['objects']['0']['solr_doc'];
    $value = (isset($solr_results_doc[$field]) && is_array($solr_results_doc[$field])) ? (($single_result) ? $solr_results_doc[$field][0] : implode("<br>", $solr_results_doc[$field])) : 
      (isset($solr_results_doc[$field]) ? $solr_results_doc[$field] : '');
  }
  return $value;
}

/**
 * Helper function to lookup the parent object based on a PID value.
 */
function _islandora_solr_pid_parent_search($child_object, $solr_fields, $options, $skey, $lookup_pid = '') {
  $child_pid = ($lookup_pid) ? $lookup_pid : $child_object['PID'];

  $solr_fields_had_PID = !(array_search('PID', $solr_fields) === FALSE);
  // PID must be in the search
  if (!$solr_fields_had_PID) {
    $solr_fields['PID'] = array('label' => 'PID', 'class' => 'PID');
  }
  $solr_fields_keys = array_keys($solr_fields);
  $solr_fields_csv = implode(",", $solr_fields_keys);
  $_islandora_solr_queryclass = new IslandoraSolrQueryProcessor();
  $islandora_object = islandora_object_load($child_pid);
  $parent = $islandora_object->getParents();
  $page_parents = $islandora_object->relationships->get(NULL, 'isPageOf');
  $page_parent_ids = array();
  foreach ($page_parents as $page_parent) {
    $page_parent_ids[] = $page_parent['object']['value'];
  }
  if (count($page_parent_ids) > 0) {
    $parent = $page_parent_ids;
  }
  // Get the first value if there happens to be more than one Parent.
  $pid = array_pop($parent);  
  // WHY WAS THIS USING THIS COLLECTION LOOKUP?
  //  $pid = _collection_pid(array_pop($parent), $skey);
  if ($pid) {
    // Build and execute Apache Solr query.
    module_load_include('inc', 'islandora_solr', 'includes/utilities');
    $query_processor = new IslandoraSolrQueryProcessor();
    $query_processor->solrQuery = 'PID:'.islandora_solr_lesser_escape($pid);
    $query_processor->solrStart = 0;
    $query_processor->solrLimit = 1;
    $query_processor->solrParams = array(
      'fl' => $solr_fields_csv,
      'fq' => variable_get('islandora_solr_base_filter', ''),
    );
    $url = parse_url(variable_get('islandora_solr_url', 'localhost:8080/solr'));
    $solr = new Apache_Solr_Service($url['host'], $url['port'], $url['path'] . '/');
    $solr->setCreateDocuments(FALSE);
    try {
      $results = $solr->search($query_processor->solrQuery, $query_processor->solrStart, $query_processor->solrLimit, $query_processor->solrParams, 'GET');
      $tmp = json_decode($results->getRawResponse(), TRUE);
      $added_fields = $results = array();
      foreach ($solr_fields as $key => $solr_field) {
        $found = false;
        foreach ($tmp['response']['docs'] as $match_result) {
          if (array_key_exists($key, $match_result)) {
            $found = (is_array($match_result[$key])) ? $match_result[$key][0] : $match_result[$key];
          }
        }
        if ($found) {
          $added_fields[] = $key;
          $results[$key] = array('label' => $solr_fields[$key]['label'],
                                 'class' => $solr_fields[$key]['class'],
                                 'value' => $found);
        }
      }
      foreach ($tmp['response']['docs'] as $trip) {
        $keys = array_keys($trip);
        foreach ($keys as $key) {
          if (!array_search($key, $added_fields)) {
            $value = is_array($trip[$key]) ? $trip[$key][0] : $trip[$key];
            $results[$key] = array('label' => $solr_fields[$key]['label'],
                                   'class' => $solr_fields[$key]['class'],
                                   'value' => $value);
          }
        }
      }
      if (isset($results['dc.title']['value']) && $child_object) {
        $results['dc.title']['value'] = l($results['dc.title']['value'], $child_object['object_url'], $options);
      }
      // Remove the PID field if it was added for the query to run valid.
/*      if (!$solr_fields_had_PID) {
        unset($results['PID']);
      }*/
      return $results;
    }
    catch (Exception $e) {
      error_log('EXCEPTION in _islandora_solr_pid_parent_search : called from ' . $_SERVER['SERVER_NAME'] .
' - ' . $_SERVER['REQUEST_URI'] . '
' . print_r($e, true));
      return array();
    }
  }
}

/**
 * Implements hook_permission().
 */
function upitt_islandora_solr_search_extras_permission() {
  return array(
    UPITT_ISLANDORA_SOLR_SEARCH_EXTRAS_MANAGE => array(
      'title' => t('Manage solr extras'),
      'description' => t('Manage solr extras.'),
    ),
  );
}

// solr search sessions handling
/**
 * Implements hook_preprocess_theme().
 *
 * This code will remove the sidebar and must check to see whether or not the path is on a user page.
 */
function upitt_islandora_solr_search_extras_preprocess_page(&$vars) {
  module_load_include('inc', 'islandora', 'includes/metadata');
  $is_first_page = !(isset($_GET['page']));
  $item = menu_get_item();
  $path = drupal_get_path('module', 'upitt_islandora_solr_search_extras');
  if (is_array($item)) {
    if (($item['map'][0] == 'user') || ($item['path'] == 'islandora/object/%/from_search/%') || 
      ($item['path'] == 'islandora/object/%/datastream/%/htmledit') ||
      ($item['path'] == 'islandora/object/%/viewer') || ($item['path'] == 'collections')) {
      // remove sidebar for /user page in case it is there
      $vars['page']['sidebar'] = array();
    }
    if ($item['path'] == 'islandora/search' || $item['path'] == 'islandora/search/%' || $item['path'] == 'islandora/search_collection/%') {
      drupal_add_js("$path/js/solr_extras.js");
      drupal_add_css("$path/css/solr_search_extras.css");
    }
  }
  // if the second menu path is an islandora_object then get the links for Previous, Next, and Restun to Solr Search
  $islandora_object = menu_get_object('islandora_object', 2);
  $is_collection = _is_collection($islandora_object);
  if (($islandora_object) && ($item['path'] == 'islandora/object/%/from_search/%' || 
    $item['path'] == 'islandora/search_collection/%' ||
    !isset($vars['collection_metadata']))) {
    $vars['solr_search_links'] = _gen_solr_search_links($islandora_object->id);
//    $vars['collection_metadata'] = (function_exists('islandora_retrieve_metadata_markup')) ? islandora_retrieve_metadata_markup($islandora_object) : '';
  }
  if ($islandora_object) {
    $upitt_date = _get_best_date($islandora_object);
    $title = _get_title_with_nonSort($islandora_object);
    $vars['title'] = $title . (($upitt_date) ? ', ' . $upitt_date : '');
    drupal_set_title($title);

    // remove sidebar - except when object is collectionCModel
    if (!$is_collection && ($item['path'] == 'islandora/object/%')) {
      $vars['page']['sidebar'] = array();
      $vars['page']['islandora_object_sidebar'] = array();
    }
    elseif ($is_collection) {
      drupal_add_js("$path/js/solr_extras.js");
      $vars['collection_page_metadata'] = ($is_first_page) ? ((function_exists('islandora_retrieve_metadata_markup')) ? islandora_retrieve_metadata_markup($islandora_object) : '') : '';
      $collection_tn_url = '';
      if ($is_first_page) {
        if (isset($islandora_object['TN_LARGE'])) {
          $collection_tn_url = url("islandora/object/{$islandora_object->id}/datastream/TN_LARGE/view");
        } elseif (isset($islandora_object['TN'])) {
          $collection_tn_url = url("islandora/object/{$islandora_object->id}/datastream/TN/view");
        }
        if ($collection_tn_url) { 
          $params = array(
            'title' => $islandora_object->label,
            'alt' => $islandora_object->label,
            'path' => $collection_tn_url);
          $vars['collection_tn_img'] = theme('image', $params);
        }
      }
    }
  }
}

/** 
 * Helper function to get the nonSort field and title field together
 */
function _get_title_with_nonSort($islandora_object) {
  $nonSort = _get_solr_field_value_special($islandora_object, 'mods_titleInfo_nonSort_s', FALSE);
  return (($nonSort) ? $nonSort . ' ' : '') . rtrim(rtrim(rtrim(ucfirst($islandora_object->label), ') '), ')'), ',');
}

/**
 * Helper function to get the best date value to display for a collection or an object.
 * This date value is merged with the <h1> title.
 */
function _get_best_date($islandora_object) {
  $date = '';
  // For a collection, use the mods_originInfo_type_display_dateOther_s date field.
  if (_is_collection($islandora_object)) {
    $date = _get_solr_field_value_special($islandora_object, 'mods_originInfo_type_display_dateOther_s', true);
  }
  else {
    $solr_date_fields = array(// 'dc.date',
                              'mods_originInfo_dateOther_ms',
                              'mods_originInfo_encoding_iso8601_keyDate_yes_dateIssued_s',
                              'mods_originInfo_type_display_dateOther_s',
      );
    foreach ($solr_date_fields as $solr_date_field) {
      $date = ($date) ? $date : _get_solr_field_value_special($islandora_object, $solr_date_field, true);
    }
  }
  return $date;
}

/**
 * Helper function to get the PIDS/Titles for a given skey value.  Returns the total number of results.
 */
function _get_pids_and_titles($skey, &$pids, &$titles, &$solr_search_url) {
  $pids = $titles = array();
  $rows = db_query('SELECT r.offset, r.PID, r.title, s.solr_search_url, s.numResults ' .
                   'FROM {solr_search_sessions} s ' .
                   'JOIN {solr_search_skey_results} r ON (r.skey = s.skey) ' .
                   'WHERE s.skey = :s ORDER BY r.offset', array(':s' => $skey))->fetchAllAssoc('PID');
  $row = NULL;
  foreach ($rows as $row) {
    $pid = $row->PID;
    $title = $row->title;
    if ($pid && $title) {
      $pids[$row->offset] = $pid;
      $titles[$row->offset] = $title;
    }
  }
  if (is_object($row)) {
    $solr_search_url = $row->solr_search_url;
    $numResults = $row->numResults;
  }
  else {
    $numResults = 0;
  }
  return $numResults;
}

/**
 * This returns array of links for a page that came from refer: solr search results.
 */
function _gen_solr_search_links($pid) {
  $skey = (isset($_GET['skey']) ? $_GET['skey'] : '');
  $cur_url = $_SERVER['REQUEST_URI'];
  $parts = explode("/", $cur_url);
  if (count($parts) < 5 && !$skey) {
    return '';
  }
  elseif ($parts[4] == 'from_search' || $skey) {
    $skey = ($skey) ? $skey : $parts[5];
    @list($skey, $this_idx) = explode("-", $skey);
    $pids = $titles = array();
    $solr_search_url = '';
    $numResults = _get_pids_and_titles($skey, $pids, $titles, $solr_search_url);
    if (!isset($pids[$this_idx + 1])) {
      _save_solr_search_session($skey, NULL, $solr_search_url, $this_idx, 3);
    }
    elseif(!isset($pids[$this_idx - 1])) {
      $floor = max($this_idx - 3, 0);
      _save_solr_search_session($skey, NULL, $solr_search_url, $floor, 3);
    }
    $numResults = _get_pids_and_titles($skey, $pids, $titles, $solr_search_url);

    if (count($pids) > 0) {
      $links = array();
      if ($this_idx > 0 && !($this_idx === FALSE)) {
        $links[] = l('‹ Previous', 
          _inject_skey('', $pids[$this_idx - 1], $skey . '-' . ($this_idx - 1)),
          array(
            'attributes' => array(
            'title' => $titles[$this_idx - 1],
            )
          )
        );
      }
      // The link function messes up the query by reencoding the parts that are already encoded.  Based on the offset, 
      // the page of this search result can be determined.
      $results_per_page = variable_get('islandora_solr_num_of_results', 20);
      $page = intval($this_idx / $results_per_page);
      $solr_search_url = ($page) ? _inject_page_parameter($solr_search_url, $page) : $solr_search_url;
      $links[] = '<a href="/' . ltrim(str_replace('"', '%22', $solr_search_url), '/') . '">Back to Search Results</a>';
      if (isset($pids[$this_idx + 1])) {
        $links[] = l('Next ›', 
          _inject_skey('', $pids[$this_idx + 1], $skey . '-' . ($this_idx + 1)),
          array(
            'attributes' => array(
            'title' => $titles[$this_idx + 1],
            )
          )
        );
      }
      return $links;
    }
  }
}

// I think this function is obsolete and can safely be removed.
function upitt_islandora_solr_search_extras_preprocess_islandora_object(&$vars) {
  $islandora_object = menu_get_object('islandora_object', 2);
  if ($islandora_object) {
    $vars['solr_search_links'] = array(l('Previous', '#'), l('Next', '#'), l('Return to Search Results', '#'));
  }
}

// Solr search sessions handling.  If this was invoked via drupal_get_form, the inner content would
// be wrapped with a <form> element and that breaks the functionality of the bookreader javascript.
// 
function upitt_islandora_solr_search_extras__islandora_view_object(AbstractObject $object, $from_search = '') {
  return islandora_view_object($object);
}

// solr search sessions handling
function upitt_islandora_solr_search_extras__islandora_drupal_title(AbstractObject $object) {
  return islandora_drupal_title($object);
}

// solr search sessions handling
function upitt_islandora_solr_search_extras__islandora_object_access_callback($perm, $object = NULL) {
  return islandora_object_access_callback($perm, $object);
}

/**
 * Helper function to parse a URL to obtain the PID for an islandora_object.  When the referred PID is not a collection, 
 * try to derive the collection PID from the related solr_search_sessions' solr_search_url record.
 */
function _collection_pid($url, $skey) {
  // value like "islandora/object/pitt:collection.121/search_collection/catch_all_fields_mt:(white)"
  $stripped = str_replace(array("islandora/search_collection/", "islandora/object/", "info:fedora/"), '', $url);
  @list($stripped, $junk) = explode('/search_collection/', $stripped);
  @list($pid, $junk) = explode('/from_search', $stripped);
  // The PID should never be a page or any other object that was looked up based on it not having MODS info -- 
  // inspect the islandora_object and return the parent collection.
  $islandora_object = islandora_object_load($pid);
  // The referred PID is not a collection - need to look up the solr_search_sessions record
  if ($islandora_object) { // && !isset($islandora_object['MODS'])) {
    $result = db_query('SELECT u.source FROM {solr_search_sessions} s JOIN {url_alias} u ON u.alias = s.solr_search_url WHERE s.skey = :skey', array(':skey' => $skey));
    if ($record = $result->fetchAssoc()) {
      $source_url = $record['source'];
      $pid = str_replace('islandora/search_collection/', '', $source_url);
      return $pid;
    }
    if (in_array('islandora:collectionCModel', $islandora_object->models) === FALSE) {
      // If the object is part of two collections on the same site, there is no way to return the correct collection at this point - 
      // returns THE FIRST collection PID from the parent collection objects.
      $parent = $islandora_object->getParents();
      $collection = $islandora_object->relationships->get(NULL, 'isMemberOfCollection');
      $collection_ids = array();
      foreach ($collection as $page_parent) {
        $collection_ids[] = $page_parent['object']['value'];
      }
      $parent = array_merge($parent, $collection_ids);
      $pid = array_pop($parent);
    } else {
      // url represents a collection, simply look up the alias
      $source = 'islandora/object/' . $pid;
      $result = db_query('SELECT `alias` FROM {url_alias} WHERE `source` = :source', array(':source' => $source));
      if ($record = $result->fetchAssoc()) {
        if ($record['alias']) {
          $pid = $record['alias'];
        }
      }
    }
  }

  return $pid;
}

/**
 * Helper function to determine whether or not the $islandora_object is a collection.
 */
function _is_collection($islandora_object) { 
  return (is_object($islandora_object)) ? !(array_search('islandora:collectionCModel', $islandora_object->models) === FALSE) : FALSE;
}

function _inject_page_parameter($solr_search_url, $page) {
  if (strstr($solr_search_url, "?")) {
    return str_replace('?', '?page=' . $page . '&', $solr_search_url);
  } else {
    $last_slash_pos = (strstr($solr_search_url, '&')) ? strrpos($solr_search_url, "/") :  // The last position of a "/"
      strlen($solr_search_url);
    $remaining_params = substr($solr_search_url, $last_slash_pos);
    if ($last_slash_pos) {
      return substr($solr_search_url, 0, $last_slash_pos) . '?page='. $page . (($remaining_params) ? '&' . $remaining_params : '');
    }
    else {
      return $solr_search_url . '?page=' . $page;
    }
  } 
}

function upitt_islandora_solr_search_extras_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'islandora_solr_advanced_search_form') {
    $current_action = $form['#action'];
    if (strstr($current_action, 'type=dismax')) {
      @list($search, $junk) = explode("?", $current_action);
      $search = str_replace('/islandora/search/', '', $search);
      $form['#action'] = '/islandora/search/?f[0]=catch_all_fields_mt:' . urlencode($search);
    }
  } elseif ($form_id == 'islandora_solr_simple_search_form') {
    $form['#action'] = '/islandora/search';
  }
}

/**
 * helper function to determine whether or not we can look  up the MODS for the object underlying the $pid
 * based on the model of that object.
 */
function _can_lookup_MODS($pid) {
  $islandora_object = islandora_object_load($pid);
  $answer = FALSE;
  if (is_object($islandora_object)) {
    if (!(array_search('islandora:pageCModel', $islandora_object->models) === FALSE)) {
      $answer = TRUE;
    }
  }
  return $answer;
}

/**
 * Implements hook_islandora_solr_results_alter().
 *
 * Due to the way that we display a collection using the search interface, we do not need url_fragment values to have
 * the collection as the fragment (because the collection is represented by a search for items in that collection).
 */
function upitt_islandora_solr_search_extras_islandora_solr_results_alter(&$search_results, $query_processor) {
  foreach ($search_results as $k => $result) {
    if (isset($result['object_url_fragment'])) {
      $search_results[$k]['object_url_fragment'] = _fix_fragment_searchterms_only($result['object_url_fragment'], $query_processor);
    }
  }
}

function _fix_fragment_searchterms_only($fragment, $query_processor) {
  if ($query_processor->solrDefType == 'dismax' || $query_processor->solrDefType == 'edismax') {
    return $fragment;
  }
  else {
    return '';
  }
}

